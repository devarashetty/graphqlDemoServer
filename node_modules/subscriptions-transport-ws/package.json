{
  "_args": [
    [
      {
        "raw": "subscriptions-transport-ws",
        "scope": null,
        "escapedName": "subscriptions-transport-ws",
        "name": "subscriptions-transport-ws",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/sairam/Downloads/graphqlserver"
    ]
  ],
  "_from": "subscriptions-transport-ws@latest",
  "_id": "subscriptions-transport-ws@0.5.5",
  "_inCache": true,
  "_location": "/subscriptions-transport-ws",
  "_nodeVersion": "7.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/subscriptions-transport-ws-0.5.5.tgz_1491967891165_0.8395250542089343"
  },
  "_npmUser": {
    "name": "urigo",
    "email": "uri.goldshtein@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "subscriptions-transport-ws",
    "scope": null,
    "escapedName": "subscriptions-transport-ws",
    "name": "subscriptions-transport-ws",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/subscriptions-transport-ws/-/subscriptions-transport-ws-0.5.5.tgz",
  "_shasum": "7715ed4306f532a9dd53c02cbd789d2ee8871bb9",
  "_shrinkwrap": null,
  "_spec": "subscriptions-transport-ws",
  "_where": "/home/sairam/Downloads/graphqlserver",
  "browser": "dist/client.js",
  "bugs": {
    "url": "https://github.com/apollostack/subscriptions-transport-ws/issues"
  },
  "contributors": [
    {
      "name": "Authors"
    },
    {
      "name": "Jonas Helfer",
      "email": "helfer@users.noreply.github.com"
    },
    {
      "name": "Jonas Helfer",
      "email": "jonas@helfer.email"
    },
    {
      "name": "Amanda Jin Liu",
      "email": "ajliu72@gmail.com"
    },
    {
      "name": "Robin Ricard",
      "email": "ricard.robin@gmail.com"
    },
    {
      "name": "Sashko Stubailo",
      "email": "s.stubailo@gmail.com"
    },
    {
      "name": "Sashko Stubailo",
      "email": "sashko@stubailo.com"
    },
    {
      "name": "Hagai Cohen",
      "email": "DxCx@users.noreply.github.com"
    },
    {
      "name": "Kamil Kisiela",
      "email": "kamil.kisiela@gmail.com"
    },
    {
      "name": "Francois Valdy",
      "email": "gluck@users.noreply.github.com"
    },
    {
      "name": "Daniel Rinehart",
      "email": "NeoPhi@users.noreply.github.com"
    },
    {
      "name": "Lukas Fittl",
      "email": "lfittl@users.noreply.github.com"
    }
  ],
  "dependencies": {
    "@types/ws": "0.0.38",
    "backo2": "^1.0.2",
    "eventemitter3": "^2.0.2",
    "graphql": "^0.9.1",
    "graphql-subscriptions": "^0.3.0",
    "graphql-tag": "^1.2.4",
    "lodash.isobject": "^3.0.2",
    "lodash.isstring": "^4.0.1",
    "ws": "^1.1.0"
  },
  "description": "A websocket transport for GraphQL subscriptions",
  "devDependencies": {
    "@types/chai": "^3.4.35",
    "@types/graphql": "^0.8.6",
    "@types/lodash": "4.14.42",
    "@types/mocha": "^2.2.31",
    "@types/node": "^7.0.5",
    "@types/sinon": "^1.16.31",
    "chai": "^3.5.0",
    "istanbul": "^1.0.0-alpha.2",
    "lodash": "^4.17.1",
    "mocha": "^3.0.0",
    "remap-istanbul": "^0.7.0",
    "sinon": "^1.17.6",
    "tslint": "^3.13.0",
    "typescript": "^2.0.0",
    "typings": "^1.3.2",
    "webpack": "^2.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "7715ed4306f532a9dd53c02cbd789d2ee8871bb9",
    "tarball": "https://registry.npmjs.org/subscriptions-transport-ws/-/subscriptions-transport-ws-0.5.5.tgz"
  },
  "gitHead": "42156e24317a1a6d2f9ea5fd5c90d30f5d6a68cb",
  "homepage": "https://github.com/apollostack/subscriptions-transport-ws#readme",
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "helfer",
      "email": "helfer@meteor.com"
    },
    {
      "name": "sashko",
      "email": "sashko@stubailo.com"
    },
    {
      "name": "urigo",
      "email": "uri.goldshtein@gmail.com"
    }
  ],
  "name": "subscriptions-transport-ws",
  "optionalDependencies": {},
  "readme": "[![npm version](https://badge.fury.io/js/subscriptions-transport-ws.svg)](https://badge.fury.io/js/subscriptions-transport-ws) [![GitHub license](https://img.shields.io/github/license/apollostack/subscriptions-transport-ws.svg)](https://github.com/apollostack/subscriptions-transport-ws/blob/license/LICENSE)\n\n# subscriptions-transport-ws\n\n**(Work in progress!)**\n\nA GraphQL WebSocket server and client to facilitate GraphQL subscriptions.\n\n> `subscriptions-transport-ws` is an extension for GraphQL, and you can use it with any GraphQL client and server (not only Apollo).\n\nSee [GitHunt-API](https://github.com/apollostack/GitHunt-API) and [GitHunt-React](https://github.com/apollostack/GitHunt-React) for an example server and client integration.\n\n# Getting Started\n\nStart by installing the package, using Yarn or NPM:\n\n    Using Yarn:\n    $ yarn add subscriptions-transport-ws\n\n    Or, using NPM:\n    $ npm install --save subscriptions-transport-ws\n\n> This command also installs this package's dependencies, including `graphql-subscriptions`.\n\n### Server\n\nStarting with the server, create a new simple `SubscriptionsManager`, with a `PubSub` implementation:\n\n```js\nimport { SubscriptionManager, PubSub } from 'graphql-subscriptions';\n\nconst schema = {}; // Replace with your GraphQL schema object\nconst pubsub = new PubSub();\n\nconst subscriptionManager = new SubscriptionManager({\n  schema,\n  pubsub\n});\n```\n\nNow, use your `subscriptionManager`, and create your `SubscriptionServer`:\n\n```js\nimport { createServer } from 'http';\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\n\nconst WS_PORT = 5000;\n\n// Create WebSocket listener server\nconst websocketServer = createServer((request, response) => {\n  response.writeHead(404);\n  response.end();\n});\n\n// Bind it to port and start listening\nwebsocketServer.listen(WS_PORT, () => console.log(\n  `Websocket Server is now running on http://localhost:${WS_PORT}`\n));\n\nconst subscriptionServer = new SubscriptionServer(\n  {\n    onConnect: async (connectionParams) => {\n      // Implement if you need to handle and manage connection\n    },\n    subscriptionManager: subscriptionManager\n  },\n  {\n    server: websocketServer,\n    path: '/'\n  }\n);\n```\n\n### Client (browser)\n\nFor client side, we will use `SubscriptionClient`, and we also need to extend our network interface to use this transport for GraphQL subscriptions:\n\n```js\nimport {SubscriptionClient, addGraphQLSubscriptions} from 'subscriptions-transport-ws';\nimport ApolloClient, {createNetworkInterface} from 'apollo-client';\n\n// Create regular NetworkInterface by using apollo-client's API:\nconst networkInterface = createNetworkInterface({\n uri: 'http://localhost:3000' // Your GraphQL endpoint\n});\n\n// Create WebSocket client\nconst wsClient = new SubscriptionClient(`ws://localhost:5000/`, {\n    reconnect: true,\n    connectionParams: {\n        // Pass any arguments you want for initialization\n    }\n});\n\n// Extend the network interface with the WebSocket\nconst networkInterfaceWithSubscriptions = addGraphQLSubscriptions(\n    networkInterface,\n    wsClient\n);\n\n// Finally, create your ApolloClient instance with the modified network interface\nconst apolloClient = new ApolloClient({\n    networkInterface: networkInterfaceWithSubscriptions\n});\n```\n\nNow, when you want to use subscriptions in client side, use your `ApolloClient` instance, with `subscribe` or `subscribeToMore` (according to your apollo-client usage):\n\n```js\napolloClient.subscribeToMore({\n    document: gql`\n        subscription onNewItem {\n            newItemCreated {\n                id\n            }\n        }`,\n    variables: {},\n    updateQuery: (prev, {subscriptionData}) => {\n        return; // Modify your store and return new state with the new arrived data\n    }\n});\n```\n\nIf you don't use any package/modules loader, you can still use this package, by using `unpkg` service, and get the client side package from:\n\n```\nhttps://unpkg.com/subscriptions-transport-ws@VERSION/browser/client.js\n```\n\n> Replace VERSION with the latest version of the package.\n\n### Use it with GraphiQL\n\nYou can use this package's power with GraphiQL, and subscribe to live-data stream inside GraphiQL.\n\nIf you are using the latest version of `graphql-server` flavors (`graphql-server-express`, `graphql-server-koa`, etc...), you already can use it! Make sure to specify `subscriptionsEndpoint` in GraphiQL configuration, and that's it!\n\nFor example, `graphql-server-express` users need to add the following:\n\n```js\napp.use('/graphiql', graphiqlExpress({\n  endpointURL: '/graphql',\n  subscriptionsEndpoint: `YOUR_SUBSCRIPTION_ENDPOINT_HERE`,\n}));\n```\n\nIf you are using older version, or another GraphQL server, start by modifying GraphiQL static HTML, and add this package and it's fetcher from CDN:\n\n```html\n    <script src=\"//unpkg.com/subscriptions-transport-ws@0.5.4/browser/client.js\"></script>\n    <script src=\"//unpkg.com/graphiql-subscriptions-fetcher@0.0.2/browser/client.js\"></script>\n```\n\nThen, create `SubscriptionClient` and define the fetcher:\n\n```js\nlet subscriptionsClient = new window.SubscriptionsTransportWs.SubscriptionClient('SUBSCRIPTION_WS_URL_HERE', {\n  reconnect: true\n});\nlet myCustomFetcher = window.GraphiQLSubscriptionsFetcher.graphQLFetcher(subscriptionsClient, graphQLFetcher);\n```\n\n> `graphQLFetcher` is the default fetcher, and we use it as fallback for non-subscription GraphQL operations.\n\nAnd replace your GraphiQL creation logic to use the new fetcher:\n\n```js\nReactDOM.render(\n  React.createElement(GraphiQL, {\n    fetcher: myCustomFetcher, // <-- here\n    onEditQuery: onEditQuery,\n    onEditVariables: onEditVariables,\n    onEditOperationName: onEditOperationName,\n    query: ${safeSerialize(queryString)},\n    response: ${safeSerialize(resultString)},\n    variables: ${safeSerialize(variablesString)},\n    operationName: ${safeSerialize(operationName)},\n  }),\n  document.body\n);\n```\n\n# API\n\n## SubscriptionClient\n### `Constructor(url, options, connectionCallback)`\n- `url: string` : url that the client will connect to\n- `options?: Object` : optional, object to modify default client behavior\n  * `timeout?: number` : how long the client should wait in ms for a subscription to be started (default 5000 ms)how long the client should wait in ms for a subscription to be started (default 5000 ms)\n  * `connectionParams?: Object` : object that will be available as first argument of `onConnect` (in server side)\n  * `reconnect?: boolean` : automatic reconnect in case of connection error\n  * `reconnectionAttempts?: number` : how much reconnect attempts\n  * `connectionCallback?: (error) => {}` : optional, callback that called after the first init message, with the error (if there is one)\n- `webSocketImpl: Object` - optional, WebSocket implementation. use this when your environment does not have a built-in native WebSocket (for example, with NodeJS client)\n\n### Methods\n#### `subscribe(options, handler) => id`\n- `options: {SubscriptionOptions}`\n  * `query: string` : GraphQL subscription\n  * `variables: Object` : GraphQL subscription variables\n  * `operationName: string` : operation name of the subscription\n- `handler: (errors: Error[], result?: any) => void` : function to handle any errors and results from the subscription response\n\n#### `unsubscribe(id) => void` - unsubscribes from a specific subscription\n- `id: string` : the subscription ID of the subscription to unsubscribe from\n\n#### `unsubscribeAll() => void` - unsubscribes from all active subscriptions.\n\n#### `on(eventName, callback, thisContext) => Function`\n- `eventName: string`: the name of the event, available events are: `connect`, `reconnect` and `disconnect`\n- `callback: Function`: function to be called when websocket connects and initialized.\n- `thisContext: any`: `this` context to use when calling the callback function.\n- => Returns an `off` method to cancel the event subscription.\n\n#### `onConnect(callback, thisContext) => Function` - shorthand for `.on('connect', ...)`\n- `callback: Function`: function to be called when websocket connects and initialized.\n- `thisContext: any`: `this` context to use when calling the callback function.\n- => Returns an `off` method to cancel the event subscription.\n\n#### `onReconnect(callback, thisContext) => Function` - shorthand for `.on('reconnect', ...)`\n- `callback: Function`: function to be called when websocket re-connects and initialized.\n- `thisContext: any`: `this` context to use when calling the callback function.\n- => Returns an `off` method to cancel the event subscription.\n\n#### `onDisconnect(callback, thisContext) => Function` - shorthand for `.on('disconnect', ...)`\n- `callback: Function`: function to be called when websocket disconnects.\n- `thisContext: any`: `this` context to use when calling the callback function.\n- => Returns an `off` method to cancel the event subscription.\n\n## Client-side helpers\n\n#### `addGraphQLSubscriptions(networkInterface, wsClient) => void`\n- `networkInterface: any` - network interface to extend with `subscribe` and `unsubscribe` methods.\n- `wsClient: SubscriptionClient` - network interface to extend with `subscribe` and `unsubscribe` methods.\n\nA quick way to add the `subscribe` and `unsubscribe` functions to the [network interface](http://dev.apollodata.com/core/network.html#createNetworkInterface)\n\n\n## SubscriptionServer\n### `Constructor(options, socketOptions)`\n- `options: {ServerOptions}`\n  * `subscriptionManager: SubscriptionManager` : GraphQL subscription manager\n  * `onSubscribe?: (message: SubscribeMessage, params: SubscriptionOptions, webSocket: WebSocket)` : optional method to create custom params that will be used when resolving this subscription\n  * `onUnsubscribe?: (webSocket: WebSocket)` : optional method that called when a client unsubscribe\n  * `onConnect?: (connectionParams: Object, webSocket: WebSocket)` : optional method that called when a client connects to the socket, called with the `connectionParams` from the client, if the return value is an object, its elements will be added to the context. return `false` or throw an exception to reject the connection. May return a Promise.\n  * `onDisconnect?: (webSocket: WebSocket)` : optional method that called when a client disconnects\n  * `keepAlive?: number` : optional interval in ms to send `KEEPALIVE` messages to all clients\n- `socketOptions: {WebSocket.IServerOptions}` : options to pass to the WebSocket object (full docs [here](https://github.com/websockets/ws/blob/master/doc/ws.md))    \n  * `server?: HttpServer` - existing HTTP server to use (use without `host`/`port`)\n  * `host?: string` - server host\n  * `port?: number` - server port\n  * `path?: string` - endpoint path\n    \n## Client-server communication\n\nEach message has a `type` field, which defined in the protocol of this package, as well as associated fields depending on the message type.\n\n### Client -> Server\n\n#### INIT\nClient sends this message after connecting, this triggers `onConnect` on the server.\n- `payload: Object` : optional parameters that the client specifies in `connectionParams`\n\n#### SUBSCRIPTION_START\nClient sends this message to start a subscription for a query.\n- `query: GraphQLDocument` :  GraphQL subscription\n- `variables: Object` : GraphQL subscription variables\n- `operationName: string` : operation name of the subscription\n- `id: string` : subscription ID\n\n#### SUBSCRIPTION_END\nClient sends this message to end a subscription.\n- `id: string` : subscription ID of the subscription to be terminated\n\n\n### Server -> Client\n\n#### INIT_FAIL\nThe server sends this message if `onConnect` callback returns `false` or throws an exception. after sending this message, the server disconnects the client.\n- `payload: Object`: the server side error\n\n#### INIT_SUCCESS\nThe server sends this message if `onConnect` callback returns any other value then `false`.\n\n#### SUBSCRIPTION_SUCCESS\nThe server sends this message to confirm that it has validated the subscription query and\nis subscribed to the triggers.\n- `id: string` : ID of the subscription that was successfully set up\n\n#### SUBSCRIPTION_FAIL\nServer sends this message upon failing to register a subscription. It may also send this message\nat any point during the subscription to notify the client the the subscription has been stopped.\n- `payload: { errors: Array<Object> }` : payload with an array of errors attributed to the subscription failing on the server\n- `id: string` : subscription ID of the subscription that failed on the server\n\n#### SUBSCRIPTION_DATA\nGraphQL result sent periodically from server to client according to subscription.\n- `payload: GraphQLResult` : GraphQL result from running the subscription\n- `id: string` : subscription ID\n\n#### KEEPALIVE\nServer message sent periodically to keep the client connection alive.\n\n### Messages Flow\n\nThis is a demonstration of client-server communication, in order to get a better understanding of the protocol flow:\n\n- Client creates a WebSocket instance using `SubscriptionsClient` object.\n- Client sends `INIT` message to the server.\n- Server calls `onConnect` callback with the init arguments, waits for init to finish and returns it's return value with `INIT_SUCCESS`, or `INIT_FAIL` in case of `false` or thrown exception from `onConnect` callback.\n- Client gets `INIT_SUCCESS` and waits for the client's app to create subscriptions.\n- App creates a subscription using `subscribe` client's API, and the `SUBSCRIPTION_START` message sent to the server.\n- Server calls `onSubscribe` callback, and responds with `SUBSCRIPTION_SUCCESS` in case of zero errors, or `SUBSCRIPTION_FAIL` if there is a problem with the subscription.\n- Client get `SUBSCRIPTION_SUCCESS` and waits for data.\n- App triggers `PubSub`'s publication method, and the server publishes the event, passing it through the `graphql-subscriptions` package for filtering and resolving.\n- Client receives `SUBSCRIPTION_DATA` with the data, and handles it with `apollo-client` instance.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/apollostack/subscriptions-transport-ws.git"
  },
  "scripts": {
    "browser-compile": "webpack --config \"./unpkg-webpack.config.js\"",
    "compile": "tsc",
    "coverage": "node ./node_modules/istanbul/lib/cli.js cover _mocha -- --full-trace ./dist/test/tests.js",
    "lint": "tslint ./src/**/*.ts",
    "postcoverage": "remap-istanbul --input coverage/coverage.raw.json --type lcovonly --output coverage/lcov.info",
    "posttest": "npm run lint",
    "prepublish": "npm run compile && npm run browser-compile",
    "pretest": "npm run compile",
    "test": "npm run testonly --",
    "testonly": "mocha --reporter spec --full-trace ./dist/test/tests.js",
    "watch": "tsc -w"
  },
  "typescript": {
    "definition": "dist/index.d.ts"
  },
  "typings": "dist/index.d.ts",
  "version": "0.5.5"
}
